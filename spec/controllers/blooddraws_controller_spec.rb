require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe BlooddrawsController do

  def mock_blooddraw(stubs={})
    @mock_blooddraw ||= mock_model(Blooddraw, stubs).as_null_object
  end

  describe "GET index" do
    it "assigns all blooddraws as @blooddraws" do
      Blooddraw.stub(:all) { [mock_blooddraw] }
      get :index
      assigns(:blooddraws).should eq([mock_blooddraw])
    end
  end

  describe "GET show" do
    it "assigns the requested blooddraw as @blooddraw" do
      Blooddraw.stub(:find).with("37") { mock_blooddraw }
      get :show, :id => "37"
      assigns(:blooddraw).should be(mock_blooddraw)
    end
  end

  describe "GET new" do
    it "assigns a new blooddraw as @blooddraw" do
      Blooddraw.stub(:new) { mock_blooddraw }
      get :new
      assigns(:blooddraw).should be(mock_blooddraw)
    end
  end

  describe "GET edit" do
    it "assigns the requested blooddraw as @blooddraw" do
      Blooddraw.stub(:find).with("37") { mock_blooddraw }
      get :edit, :id => "37"
      assigns(:blooddraw).should be(mock_blooddraw)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "assigns a newly created blooddraw as @blooddraw" do
        Blooddraw.stub(:new).with({'these' => 'params'}) { mock_blooddraw(:save => true) }
        post :create, :blooddraw => {'these' => 'params'}
        assigns(:blooddraw).should be(mock_blooddraw)
      end

      it "redirects to the created blooddraw" do
        Blooddraw.stub(:new) { mock_blooddraw(:save => true) }
        post :create, :blooddraw => {}
        response.should redirect_to(blooddraw_url(mock_blooddraw))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved blooddraw as @blooddraw" do
        Blooddraw.stub(:new).with({'these' => 'params'}) { mock_blooddraw(:save => false) }
        post :create, :blooddraw => {'these' => 'params'}
        assigns(:blooddraw).should be(mock_blooddraw)
      end

      it "re-renders the 'new' template" do
        Blooddraw.stub(:new) { mock_blooddraw(:save => false) }
        post :create, :blooddraw => {}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested blooddraw" do
        Blooddraw.stub(:find).with("37") { mock_blooddraw }
        mock_blooddraw.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => "37", :blooddraw => {'these' => 'params'}
      end

      it "assigns the requested blooddraw as @blooddraw" do
        Blooddraw.stub(:find) { mock_blooddraw(:update_attributes => true) }
        put :update, :id => "1"
        assigns(:blooddraw).should be(mock_blooddraw)
      end

      it "redirects to the blooddraw" do
        Blooddraw.stub(:find) { mock_blooddraw(:update_attributes => true) }
        put :update, :id => "1"
        response.should redirect_to(blooddraw_url(mock_blooddraw))
      end
    end

    describe "with invalid params" do
      it "assigns the blooddraw as @blooddraw" do
        Blooddraw.stub(:find) { mock_blooddraw(:update_attributes => false) }
        put :update, :id => "1"
        assigns(:blooddraw).should be(mock_blooddraw)
      end

      it "re-renders the 'edit' template" do
        Blooddraw.stub(:find) { mock_blooddraw(:update_attributes => false) }
        put :update, :id => "1"
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested blooddraw" do
      Blooddraw.stub(:find).with("37") { mock_blooddraw }
      mock_blooddraw.should_receive(:destroy)
      delete :destroy, :id => "37"
    end

    it "redirects to the blooddraws list" do
      Blooddraw.stub(:find) { mock_blooddraw }
      delete :destroy, :id => "1"
      response.should redirect_to(blooddraws_url)
    end
  end

end
