require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe LookupDrugclassesController do

  def mock_lookup_drugclass(stubs={})
    @mock_lookup_drugclass ||= mock_model(LookupDrugclass, stubs).as_null_object
  end

  describe "GET index" do
    it "assigns all lookup_drugclasses as @lookup_drugclasses" do
      LookupDrugclass.stub(:all) { [mock_lookup_drugclass] }
      get :index
      assigns(:lookup_drugclasses).should eq([mock_lookup_drugclass])
    end
  end

  describe "GET show" do
    it "assigns the requested lookup_drugclass as @lookup_drugclass" do
      LookupDrugclass.stub(:find).with("37") { mock_lookup_drugclass }
      get :show, :id => "37"
      assigns(:lookup_drugclass).should be(mock_lookup_drugclass)
    end
  end

  describe "GET new" do
    it "assigns a new lookup_drugclass as @lookup_drugclass" do
      LookupDrugclass.stub(:new) { mock_lookup_drugclass }
      get :new
      assigns(:lookup_drugclass).should be(mock_lookup_drugclass)
    end
  end

  describe "GET edit" do
    it "assigns the requested lookup_drugclass as @lookup_drugclass" do
      LookupDrugclass.stub(:find).with("37") { mock_lookup_drugclass }
      get :edit, :id => "37"
      assigns(:lookup_drugclass).should be(mock_lookup_drugclass)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "assigns a newly created lookup_drugclass as @lookup_drugclass" do
        LookupDrugclass.stub(:new).with({'these' => 'params'}) { mock_lookup_drugclass(:save => true) }
        post :create, :lookup_drugclass => {'these' => 'params'}
        assigns(:lookup_drugclass).should be(mock_lookup_drugclass)
      end

      it "redirects to the created lookup_drugclass" do
        LookupDrugclass.stub(:new) { mock_lookup_drugclass(:save => true) }
        post :create, :lookup_drugclass => {}
        response.should redirect_to(lookup_drugclass_url(mock_lookup_drugclass))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved lookup_drugclass as @lookup_drugclass" do
        LookupDrugclass.stub(:new).with({'these' => 'params'}) { mock_lookup_drugclass(:save => false) }
        post :create, :lookup_drugclass => {'these' => 'params'}
        assigns(:lookup_drugclass).should be(mock_lookup_drugclass)
      end

      it "re-renders the 'new' template" do
        LookupDrugclass.stub(:new) { mock_lookup_drugclass(:save => false) }
        post :create, :lookup_drugclass => {}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested lookup_drugclass" do
        LookupDrugclass.stub(:find).with("37") { mock_lookup_drugclass }
        mock_lookup_drugclass.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => "37", :lookup_drugclass => {'these' => 'params'}
      end

      it "assigns the requested lookup_drugclass as @lookup_drugclass" do
        LookupDrugclass.stub(:find) { mock_lookup_drugclass(:update_attributes => true) }
        put :update, :id => "1"
        assigns(:lookup_drugclass).should be(mock_lookup_drugclass)
      end

      it "redirects to the lookup_drugclass" do
        LookupDrugclass.stub(:find) { mock_lookup_drugclass(:update_attributes => true) }
        put :update, :id => "1"
        response.should redirect_to(lookup_drugclass_url(mock_lookup_drugclass))
      end
    end

    describe "with invalid params" do
      it "assigns the lookup_drugclass as @lookup_drugclass" do
        LookupDrugclass.stub(:find) { mock_lookup_drugclass(:update_attributes => false) }
        put :update, :id => "1"
        assigns(:lookup_drugclass).should be(mock_lookup_drugclass)
      end

      it "re-renders the 'edit' template" do
        LookupDrugclass.stub(:find) { mock_lookup_drugclass(:update_attributes => false) }
        put :update, :id => "1"
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested lookup_drugclass" do
      LookupDrugclass.stub(:find).with("37") { mock_lookup_drugclass }
      mock_lookup_drugclass.should_receive(:destroy)
      delete :destroy, :id => "37"
    end

    it "redirects to the lookup_drugclasses list" do
      LookupDrugclass.stub(:find) { mock_lookup_drugclass }
      delete :destroy, :id => "1"
      response.should redirect_to(lookup_drugclasses_url)
    end
  end

end
