<%

if @tables.size == 1  
  
  #if @tables[0] == "petscans"
     # need to add in join to lookup_= 
     # or look for field name lookup_? 

     sql ="SELECT distinct vgroups.id vgroup_id,  vgroups.rmr,appointments.appointment_date , "+@fields.join(',')+",appointments.comment 
      FROM vgroups, appointments,scan_procedures, scan_procedures_vgroups, "+@tables.join(',')+" "+@left_join.join(' ')+"
      WHERE vgroups.id = appointments.vgroup_id"
      @tables.each do |tab|
        sql = sql +" AND "+tab+".appointment_id = appointments.id  "
      end
      sql = sql +" AND scan_procedures.id = scan_procedures_vgroups.scan_procedure_id
      AND scan_procedures_vgroups.vgroup_id = vgroups.id "

      if @conditions.size > 0
          sql = sql +" AND "+@conditions.join(' and ')
      end
     #conditions - feed thru ActiveRecord? stop sql injection -- replace : ; " ' ( ) = < > - others?
      if @order_by.size > 0
        sql = sql +" ORDER BY "+@order_by.join(',')
      end

=begin
     # faster -- but not sure about adding enumber , and the group by , and outer join for chain of joins
      # 2095 msec vs 3193 msec
     sql_groupconcat = "      SELECT vgroups.id vgroup_id, GROUP_CONCAT(scan_procedures.codename), vgroups.rmr,appointments.appointment_date ,"+@fields.join(',') +"
                  FROM vgroups, appointments ,scan_procedures, scan_procedures_vgroups, "+@tables[0]+"  
                     "+@left_join.join(' ')+"  
                  WHERE vgroups.id = appointments.vgroup_id
                  AND appointments.id = petscans.appointment_id
                  AND scan_procedures.id = scan_procedures_vgroups.scan_procedure_id
                  AND scan_procedures_vgroups.vgroup_id = vgroups.id
                  AND "+@conditions.join(' and ')+"
                  group by vgroups.id,  vgroups.rmr,appointments.appointment_date ,"+@fields.join(',')+"
                  ORDER BY appointments.appointment_date"      
=end  
  end
  connection = ActiveRecord::Base.connection();
  @results2 = connection.execute(sql)
  @temp_results = @results2

  @results = []   
  i =0
  @temp_results.each do |var|
    @temp = []
    # take each var --- get vgroup_id => find vgroup
    # get scan procedure(s) -- make string, put in @results[0]
    # vgroup.rmr --- put in @results[1]
    # get enumber(s) -- make string, put in @results[2]
    # put the rest of var - minus vgroup_id, into @results
    # SLOWER THAN sql  -- 9915 msec vs 3193 msec
    #vgroup = Vgroup.find(var[0])
    #@temp[0]=vgroup.scan_procedures.sort_by(&:codename).collect {|sp| sp.codename}.join(", ")
    #@temp[1]=vgroup.enrollments.collect {|e| e.enumber }.join(", ")
    # change to scan_procedures.id and enrollments.id  or vgroup_id to make links-- maybe keep vgroup_id for display
    sql_sp = "SELECT distinct scan_procedures.codename 
              FROM scan_procedures, scan_procedures_vgroups
              WHERE scan_procedures.id = scan_procedures_vgroups.scan_procedure_id
              AND scan_procedures_vgroups.vgroup_id = "+var[0].to_s
    @results_sp = connection.execute(sql_sp)
    @temp[0] =@results_sp.to_a.join(", ")
    
    sql_enum = "SELECT distinct enrollments.enumber 
              FROM enrollments, enrollment_vgroup_memberships
              WHERE enrollments.id = enrollment_vgroup_memberships.enrollment_id
              AND enrollment_vgroup_memberships.vgroup_id = "+var[0].to_s
    @results_enum = connection.execute(sql_enum)
    @temp[1] =@results_enum.to_a.join(", ")
    
    var.delete_at(0) # get rid of vgroup_id
    @temp_row = @temp + var
    @results[i] = @temp_row
    i = i+1
  end  

%>




